// Generated by CoffeeScript 1.9.2
var SettingsController, trim;

trim = function(str) {
  str = str.replace(/^\s+/g, '');
  return str.replace(/\s+$/g, '');
};

SettingsController = (function() {
  SettingsController.prototype.tasksMap = {};

  SettingsController.prototype.tasks = [];

  SettingsController.prototype.fileExtensions = {
    video: '.mp4',
    slides: '.pdf',
    txtSubtitles: '.txt',
    srtSubtitles: '.srt'
  };

  function SettingsController($scope, store, classesService, timeout) {
    this.store = store;
    this.classesService = classesService;
    this.timeout = timeout;
    this.incomingTasks = this.store.incomingTasks();
    this.scope = $scope;
    $scope.filePattern = '#{course} #{sectionIndex}.#{lectureIndex} #{lecture}';
    $scope.incomings = this.incomingTasks;
    $scope.inclusionTypes = {
      video: true,
      slides: false,
      txtSubtitles: false,
      srtSubtitles: false
    };
    $scope.filename = (function(_this) {
      return function(section, lecture, sectionIndex, lectureIndex) {
        return _this.filename(section, lecture, sectionIndex, lectureIndex);
      };
    })(this);
    $scope.hasIncomingTasks = this.hasIncomingTasks();
    $scope.uncompleted = (function(_this) {
      return function() {
        return _this.uncompleted();
      };
    })(this);
    $scope.selectAll = (function(_this) {
      return function() {
        return _this.selected(true);
      };
    })(this);
    $scope.selectNone = (function(_this) {
      return function() {
        return _this.selected(false);
      };
    })(this);
    $scope.cancel = (function(_this) {
      return function() {
        $('#incomingModal').modal('hide');
        return _this.clearIncoming();
      };
    })(this);
    $scope.download = (function(_this) {
      return function() {
        $('#incomingModal').modal('hide');
        return _this.download();
      };
    })(this);
    $scope.taskIcon = (function(_this) {
      return function(task) {
        return _this.taskIcon(task);
      };
    })(this);
    if (this.hasIncomingTasks()) {
      $('#incomingModal').modal();
    }
    chrome.downloads.onChanged.addListener((function(_this) {
      return function(downloadDelta) {
        return _this.downloadChange(downloadDelta);
      };
    })(this));
  }

  SettingsController.prototype.clearIncoming = function() {
    return this.store.clearIncoming();
  };

  SettingsController.prototype.download = function() {
    var i, inclusionType, isIncluded, j, lecture, lectureIndex, len, len1, ref, ref1, ref2, section, sectionIndex;
    this.tasksMap = {};
    this.tasks = [];
    ref = this.incomingTasks.sections;
    for (sectionIndex = i = 0, len = ref.length; i < len; sectionIndex = ++i) {
      section = ref[sectionIndex];
      ref1 = section.lectures;
      for (lectureIndex = j = 0, len1 = ref1.length; j < len1; lectureIndex = ++j) {
        lecture = ref1[lectureIndex];
        if (lecture.selected) {
          ref2 = this.scope.inclusionTypes;
          for (inclusionType in ref2) {
            isIncluded = ref2[inclusionType];
            if (isIncluded && lecture[inclusionType]) {
              this.tasks.push(this.getTask(section, lecture, sectionIndex, lectureIndex, inclusionType));
            }
          }
        }
      }
    }
    this.clearIncoming();
    this.scope.tasks = this.tasks;
    return this.prepareTasks(this.tasks, 0);
  };

  SettingsController.prototype.prepareTasks = function(tasks, index) {
    if (index < tasks.length) {
      this.prepareTask(tasks[index]);
      return this.timeout((function(_this) {
        return function() {
          return _this.prepareTasks(tasks, index + 1);
        };
      })(this), 100);
    }
  };

  SettingsController.prototype.prepareTask = function(task) {
    if (task.type === 'video') {
      task.downloadItem = this.getVideoLink(task.downloadItem);
    }
    task.state = 'time';
    return this.downloadTask(task);
  };

  SettingsController.prototype.getTask = function(section, lecture, sectionIndex, lectureIndex, type) {
    return {
      filename: this.filename(section, lecture, sectionIndex, lectureIndex, type),
      downloadItem: lecture[type],
      type: type
    };
  };

  SettingsController.prototype.filename = function(section, lecture, sectionIndex, lectureIndex, type) {
    var extension, name;
    if (type === 'slides') {
      extension = lecture[type].subscript(lecture[type].lastIndexOf('.'));
    }
    name = this.scope.filePattern + (extension || this.fileExtensions[type] || '');
    return name.interpolate({
      course: this.scope.incomings.course,
      section: section.title,
      lecture: lecture.title,
      sectionIndex: sectionIndex,
      lectureIndex: lectureIndex,
      sectionNumber: sectionIndex + 1,
      lectureNumber: lectureIndex + 1
    });
  };

  SettingsController.prototype.selected = function(value) {
    var i, lecture, len, ref, results, section;
    ref = this.incomingTasks.sections;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      section = ref[i];
      results.push((function() {
        var j, len1, ref1, results1;
        ref1 = section.lectures;
        results1 = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          lecture = ref1[j];
          results1.push(lecture.selected = value);
        }
        return results1;
      })());
    }
    return results;
  };

  SettingsController.prototype.hasIncomingTasks = function() {
    var ref, ref1;
    return ((ref = this.incomingTasks) != null ? (ref1 = ref.sections) != null ? ref1.length : void 0 : void 0) > 0;
  };

  SettingsController.prototype.uncompleted = function() {
    var count, ref;
    count = 0;
    if ((ref = this.tasks) != null) {
      ref.map(function(task) {
        if ((task != null ? task.state : void 0) !== 'ok') {
          return count++;
        }
      });
    }
    return count;
  };

  SettingsController.prototype.taskIcon = function(task) {
    if (!task.state) {
      return 'icon-refresh';
    }
    return "icon-" + task.state;
  };

  SettingsController.prototype.getVideoLink = function(link) {
    var result;
    result = '';
    $.ajax({
      url: link,
      success: (function(_this) {
        return function(data) {
          var match;
          match = data.match(/.*?(<source.*?>).*/g);
          return result = trim(match[0]).replace(/^.*?src=./, '').replace(/\".*$/, '');
        };
      })(this),
      async: false
    });
    return result;
  };

  SettingsController.prototype.downloadTask = function(task) {
    var name, params;
    name = task.filename;
    if (this.scope.subdirectory && this.scope.subdirectory.length) {
      name = this.scope.subdirectory + "/" + name.clear();
    } else {
      name = name.clear();
    }
    params = {
      url: task.downloadItem,
      filename: name
    };
    console.log(params);
    return chrome.downloads.download(params, (function(_this) {
      return function(id) {
        return _this.tasksMap[id] = task;
      };
    })(this));
  };

  SettingsController.prototype.downloadChange = function(downloadDelta) {
    return this.timeout((function(_this) {
      return function() {
        var ref, task;
        task = _this.tasksMap[downloadDelta.id];
        task.state = 'circle-arrow-down';
        if (((ref = downloadDelta.state) != null ? ref.current : void 0) === 'complete') {
          return task.state = 'ok';
        }
      };
    })(this));
  };

  return SettingsController;

})();

String.prototype.interpolate = function(values) {
  return this.replace(/#{(\w*)}/g, function(ph, key) {
    return values[key];
  });
};

String.prototype.clear = function() {
  var str;
  str = this.replace(/.\[.*?\]/g, '');
  return str.replace(/[\:\/\\,\?"]+/g, '');
};

SettingsController.$inject = ['$scope', 'store', 'classesService', '$timeout'];
